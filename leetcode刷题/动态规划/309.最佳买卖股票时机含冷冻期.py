# 题目：无限次买卖， 与122区别是卖出股票后，第二天无法买入股票（及冷冻期为一天）
# 思路：四种状态

'''
1）.确定dp[i]及下标含义
0：状态一 买入股票（今天买入，或者之前就买入一直没操作）
1：状态二 前两天卖出股票，渡过了冷冻期，一直未操作，今天保持卖出股票状态
2：状态三 今天卖出股票
3：状态四 今天为冷冻期，但不可持续，只有一天

2）确定递推公式
状态一：dp[i][0] 有两种操作
- 保持持有状态 dp[i][0] = dp[i-1][0]
- 今天买入
-- 前一天是冷冻期 dp[i-1][3] - price[i]
-- 前一天是保持卖出的状态 dp[i-1][1] - price[i] 解释了为啥卖出状态分两种
故 dp[i][0] = max(dp[i-1][0], max(dp[i-1][3]-prices[i], dp[i-1][1]-prices[i]))
状态二：dp[i][1]有两种操作
- 保持卖出状态 dp[i-1][1]
- 前一天是冷冻期 dp[i-1][3]
dp[i][1] = max(dp[i-1][1], dp[i-1][3])
状态三： dp[i][2] 只有一种操作
- 今天卖出，昨天一定是买入状态，不然没卖的
dp[i][2] = dp[i-1][0] + prices[i]
状态四：dp[i][3] 
- 只有一种操作 就是昨天卖出了股票
dp[i][3] = dp[i-1][2]

3) dp初始化
dp[0][0] = -prices[i]
dp[0][1] = 0
dp[0][2] = 0
dp[0][3] = 0
'''

# 解法
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        dp = [[0] * 4 for _ in range(len(prices))]
        dp[0][0] = -prices[0]
        dp[0][1] = 0
        dp[0][2] = 0
        dp[0][3] = 0

        for i in range(1, len(prices)):
            # 买入股票
            # 1.保持状态，
            # 2.今天买入：前一天卖出股票且过了冷冻期；前一天为冷冻期
            dp[i][0] = max(dp[i-1][0], max(dp[i-1][3]-prices[i], dp[i-1][1]-prices[i]))
            # 卖出股票，过了冷冻期
            # 保持状态; 前一天是冷冻期
            dp[i][1] = max(dp[i-1][1], dp[i-1][3])
            # 今天卖出股票
            dp[i][2] = dp[i-1][0] + prices[i]
            # 今天为冷冻期
            # 前一天卖出股票
            dp[i][3] = dp[i-1][2]
        # 包含卖出股票的状态都有可能获得最大利润
        return max(dp[-1][1], dp[-1][2], dp[-1][3])